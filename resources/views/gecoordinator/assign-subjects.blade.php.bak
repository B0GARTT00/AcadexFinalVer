@php
    function ordinalSuffix($n) {
        $suffixes = ['th', 'st', 'nd', 'rd'];
        $remainder = $n % 100;
        return $n . ($suffixes[($remainder - 20) % 10] ?? $suffixes[$remainder] ?? $suffixes[0]);
    }
@endphp

@extends('layouts.app')

@section('content')
<div class="container mx-auto px-4 py-8">
    <div class="d-flex justify-content-between align-items-center mb-6">
        <h1 class="text-2xl font-bold">
            <i class="bi bi-person-badge text-success me-2"></i>
            Assign Subjects to Instructors
        </h1>

        <!-- View Mode Switcher -->
        <div class="d-flex align-items-center">
            <label for="viewMode" class="me-2 fw-semibold">View Mode:</label>
            <select id="viewMode" class="form-select form-select-sm w-auto" onchange="toggleViewMode()">
                <option value="year" selected>Year View</option>
                <option value="full">Full View</option>
            </select>
        </div>
    </div>

    @if (session('success'))
        <div class="alert alert-success">{{ session('success') }}</div>
    @endif

    @if (session('error'))
        <div class="alert alert-danger">{{ session('error') }}</div>
    @endif

    <!-- YEAR VIEW (Tabbed) -->
    <div id="yearView">
        <!-- Year Level Tabs -->
        <ul class="nav nav-tabs" id="yearTabs" role="tablist">
            @for ($level = 1; $level <= 4; $level++)
                <li class="nav-item" role="presentation">
                    <a class="nav-link {{ $level === 1 ? 'active' : '' }}"
                       id="year-level-{{ $level }}"
                       data-bs-toggle="tab"
                       href="#level-{{ $level }}"
                       role="tab"
                       aria-controls="level-{{ $level }}"
                       aria-selected="{{ $level === 1 ? 'true' : 'false' }}">
                       {{ ordinalSuffix($level) }} Year
                    </a>
                </li>
            @endfor
        </ul>

        <div class="tab-content" id="yearTabsContent">
            @for ($level = 1; $level <= 4; $level++)
                @php
                    $subjectsByYear = $yearLevels[$level] ?? collect();
                @endphp

                <div class="tab-pane fade {{ $level === 1 ? 'show active' : '' }}"
                     id="level-{{ $level }}"
                     role="tabpanel"
                     aria-labelledby="year-level-{{ $level }}">
                    <div class="bg-white shadow rounded-4 overflow-x-auto mt-3">
                        @if ($subjectsByYear->isNotEmpty())
                            <table class="table table-bordered align-middle mb-0">
                                <thead class="table-success">
                                    <tr>
                                        <th>Subject Code</th>
                                        <th>Description</th>
                                        <th>Assigned Instructor</th>
                                        <th class="text-center">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach ($subjectsByYear as $subject)
                                        <tr>
                                            <td>{{ $subject->subject_code }}</td>
                                            <td>{{ $subject->subject_description }}</td>
                                            <td>
                                                @if($subject->instructors->isNotEmpty())
                                                    <div class="assigned-instructors">
                                                        @foreach($subject->instructors as $instructor)
                                                            <div class="d-flex align-items-center mb-1">
                                                                <i class="bi bi-person-fill text-primary me-2"></i>
                                                                <span>{{ $instructor->name }}</span>
                                                            </div>
                                                        @endforeach
                                                    </div>
                                                @else
                                                    <span class="text-muted">No instructors assigned</span>
                                                @endif
                                            </td>
                                            <td class="text-nowrap">
                                                <div class="d-flex">
                                                    <button class="btn btn-sm btn-primary me-2" 
                                                            onclick="openConfirmAssignModal({{ $subject->id }}, '{{ addslashes($subject->subject_code) }}')"
                                                            title="Assign new instructor">
                                                        <i class="bi bi-person-plus"></i> Assign
                                                    </button>
                                                    @if($subject->instructors->isNotEmpty())
                                                        <button class="btn btn-sm btn-outline-danger" 
                                                                onclick="openInstructorListModal({{ $subject->id }}, '{{ addslashes($subject->subject_code) }}')"
                                                                title="Manage assigned instructors">
                                                            <i class="bi bi-person-dash"></i> Unassign
                                                        </button>
                                                    @endif
                                                </div>
                                            </td>
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
                        @else
                        <div class="bg-warning bg-opacity-25 text-warning border border-warning px-4 py-3 rounded-4 shadow-sm">
                            No subjects available for {{ ordinalSuffix($level) }} Year.
                        </div>
                        @endif
                    </div>
                </div>
            @endfor
        </div>
    </div>

    <!-- FULL VIEW (All Years) -->
    <div id="fullView" class="d-none">
        <div class="row g-4">
            @for ($level = 1; $level <= 4; $level++)
                @php
                    $subjectsByYear = $yearLevels[$level] ?? collect();
                @endphp
                <div class="col-12">
                    <div class="card border-0 shadow-sm rounded-4">
                        <div class="card-header bg-transparent border-0 py-3">
                            <div class="d-flex align-items-center">
                                <h5 class="mb-0 fw-semibold text-success">
                                    {{ ordinalSuffix($level) }} Year
                                </h5>
                                <span class="badge bg-success-subtle text-success ms-3">
                                    {{ $subjectsByYear->count() }} {{ Str::plural('subject', $subjectsByYear->count()) }}
                                </span>
                            </div>
                        </div>
                        <div class="card-body p-0">
                            @if ($subjectsByYear->isNotEmpty())
                                <div class="table-responsive">
                                    <table class="table table-hover align-middle mb-0">
                                        <thead class="table-success">
                                            <tr>
                                                <th class="border-0 py-3">Subject Code</th>
                                                <th class="border-0 py-3">Description</th>
                                                <th class="border-0 py-3">Assigned Instructors</th>
                                                <th class="border-0 py-3 text-center">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach ($subjectsByYear as $subject)
                                                <tr>
                                                    <td class="fw-medium">{{ $subject->subject_code }}</td>
                                                    <td>{{ $subject->subject_description }}</td>
                                                    <td>
                                                        @if($subject->instructors->count() > 0)
                                                            <div class="d-flex flex-column">
                                                                @foreach($subject->instructors as $instructor)
                                                                    <div class="d-flex align-items-center mb-1">
                                                                        <i class="bi bi-person-check-fill text-success me-2"></i>
                                                                        <span>{{ $instructor->name }}</span>
                                                                    </div>
                                                                @endforeach
                                                            </div>
                                                        @else
                                                            <span class="text-muted">No instructors assigned</span>
                                                        @endif
                                                    </td>
                                                    <td class="text-center">
                                                        <div class="d-flex gap-2 justify-content-center">
                                                            <button
                                                                onclick="openConfirmAssignModal({{ $subject->id }}, '{{ addslashes($subject->subject_code . ' - ' . $subject->subject_description) }}')"
                                                                class="btn btn-success shadow-sm btn-sm" 
                                                                title="Assign Instructor">
                                                                <i class="bi bi-person-plus me-1"></i> Assign
                                                            </button>
                                                            @if($subject->instructors->count() > 0)
                                                                <button
                                                                    onclick="openInstructorListModal({{ $subject->id }}, '{{ addslashes($subject->subject_code . ' - ' . $subject->subject_description) }}')"
                                                                    class="btn btn-outline-danger btn-sm" 
                                                                    title="Unassign Instructor">
                                                                    <i class="bi bi-x-circle me-1"></i> Unassign
                                                                </button>
                                                            @endif
                                                        </div>
                                                    </td>
                                                </tr>
                                            @endforeach
                                        </tbody>
                                    </table>
                                </div>
                            @else
                                <div class="text-center py-5">
                                    <div class="text-muted mb-3">
                                        <i class="bi bi-journal-x display-6"></i>
                                    </div>
                                    <p class="text-muted mb-0">No subjects available for {{ ordinalSuffix($level) }} Year.</p>
                                </div>
                            @endif
                        </div>
                    </div>
                </div>
            @endfor
        </div>
    </div>
</div>

{{-- Confirm Unassign Modal --}}
<div id="confirmUnassignModal" class="fixed inset-0 z-50 hidden items-center justify-center bg-black bg-opacity-50">
    <div class="bg-white w-full max-w-lg rounded-4 shadow-lg overflow-hidden flex flex-col">
        <div class="bg-danger text-white px-4 py-3 d-flex justify-content-between align-items-center">
            <h5 class="mb-0 fw-semibold">
                <i class="bi bi-exclamation-triangle-fill me-2"></i> Confirm Unassign
            </h5>
            <button onclick="closeConfirmUnassignModal()" class="btn-close btn-close-white" aria-label="Close"></button>
        </div>
        <div class="p-4">
            <p>Are you sure you want to unassign this subject? This action cannot be undone.</p>
            <form id="unassignForm">
                @csrf
                @method('POST')
                <input type="hidden" name="subject_id" id="unassign_subject_id">
                <div class="text-end mt-3">
                    <button type="submit" class="btn btn-danger">
                        <i class="bi bi-x-circle me-1"></i> Unassign
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="closeConfirmUnassignModal()">
                        Cancel
                    </button>
                </div>
            </form>
            
            <script>
                document.getElementById('unassignForm').addEventListener('submit', function(e) {
                    e.preventDefault();
                    const subjectId = document.getElementById('unassign_subject_id').value;
                    
                    fetch('{{ route('gecoordinator.unassignInstructor') }}', {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({
                            subject_id: subjectId,
                            _token: '{{ csrf_token() }}'
                        })
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(err => { throw err; });
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            window.location.reload();
                        } else {
                            alert('Error: ' + (data.message || 'Failed to unassign subject'));
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error: ' + (error.message || 'Failed to unassign subject'));
                    });
                });
            </script>
        </div>
    </div>
</div>

{{-- View All Instructors Modal --}}
<div id="viewAllInstructorsModal" class="modal fade" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Assigned Instructors</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="allInstructorsList">
                <!-- Instructors will be inserted here by JavaScript -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

{{-- Instructor List Modal --}}
<div id="instructorListModal" class="fixed inset-0 z-50 hidden items-center justify-center bg-black bg-opacity-50">
    <div class="bg-white w-full max-w-lg rounded-4 shadow-lg overflow-hidden flex flex-col">
        <div class="bg-primary text-white px-4 py-3 d-flex justify-content-between align-items-center">
            <h5 class="mb-0 fw-semibold">
                <i class="bi bi-people-fill me-2"></i> Assigned Instructors
            </h5>
            <button onclick="closeInstructorListModal()" class="btn-close btn-close-white" aria-label="Close"></button>
        </div>
        <div class="p-4">
            <p class="mb-3">Subject: <span id="instructorListSubjectName" class="fw-semibold"></span></p>
            <div id="instructorList" class="mb-3">
                <!-- Instructor list will be loaded here -->
            </div>
            <div class="text-end">
                <button type="button" class="btn btn-secondary" onclick="closeInstructorListModal()">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

{{-- Confirm Assign Modal --}}
<div id="confirmAssignModal" class="fixed inset-0 z-50 hidden items-center justify-center bg-black bg-opacity-50">
    <div class="bg-white w-full max-w-lg rounded-4 shadow-lg overflow-hidden flex flex-col">
        <div class="bg-success text-white px-4 py-3 d-flex justify-content-between align-items-center">
            <h5 class="mb-0 fw-semibold">
                <i class="bi bi-check-circle-fill me-2"></i> Assign Instructor
            </h5>
            <button type="button" onclick="closeConfirmAssignModal()" class="btn-close btn-close-white" aria-label="Close"></button>
        </div>
        <div class="p-4">
            <p>Assigning instructor to: <span id="assignSubjectName" class="fw-semibold"></span></p>
            <form id="assignInstructorForm" class="vstack gap-3">
                @csrf
                <input type="hidden" name="subject_id" id="assign_subject_id">
                <div>
                    <label for="instructor_select" class="form-label">Select Instructor</label>
                    <select id="instructor_select" name="instructor_id" class="form-select" required>
                        <option value="">-- Choose Instructor --</option>
                        @foreach ($instructors as $instructor)
                            <option value="{{ $instructor->id }}">{{ $instructor->name }}</option>
                        @endforeach
                    </select>
                </div>
                <div class="d-flex justify-content-end gap-2 mt-3">
                    <button type="button" class="btn btn-outline-secondary" onclick="closeConfirmAssignModal()">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-success">
                        <i class="bi bi-check-lg me-1"></i> Assign
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

{{-- View All Instructors Modal --}}
<div class="modal fade" id="viewAllInstructorsModal" tabindex="-1" aria-labelledby="viewAllInstructorsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="viewAllInstructorsModalLabel">Assigned Instructors</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="allInstructorsList">
                <!-- Instructors will be inserted here by JavaScript -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@push('scripts')
<script>
    // Show all instructors in a modal
    function showAllInstructors(subjectId) {
        const instructorsHtml = document.getElementById(`instructors-data-${subjectId}`).innerHTML;
        document.getElementById('allInstructorsList').innerHTML = instructorsHtml;
        
        const modal = new bootstrap.Modal(document.getElementById('viewAllInstructorsModal'));
        modal.show();
    }
    let currentSubjectId = null;

    function openInstructorListModal(subjectId, subjectName) {
        currentSubjectId = subjectId;
        document.getElementById('instructorListSubjectName').textContent = subjectName;
        
        // Show loading state
        const instructorList = document.getElementById('instructorList');
        instructorList.innerHTML = `
            <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2 mb-0">Loading instructors...</p>
            </div>`;
        
        // Show the modal immediately while loading
        const modal = document.getElementById('instructorListModal');
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        
        // Fetch instructors for this subject
        fetch(`/gecoordinator/subjects/${subjectId}/instructors`)
            .then(response => {
                if (!response.ok) throw new Error('Failed to load instructors');
                return response.json();
            })
            .then(instructors => {
                if (instructors.length === 0) {
                    instructorList.innerHTML = `
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle me-2"></i>
                            No instructors assigned to this subject.
                        </div>`;
                    return;
                }
                
                const listGroup = document.createElement('div');
                listGroup.className = 'list-group';
                
                instructors.forEach(instructor => {
                    const item = document.createElement('div');
                    item.className = 'list-group-item d-flex justify-content-between align-items-center';
                    item.innerHTML = `
                        <div class="d-flex align-items-center">
                            <i class="bi bi-person-fill text-primary me-2"></i>
                            <span>${instructor.name}</span>
                        </div>
                        <button 
                            onclick="confirmUnassignInstructor(${instructor.id}, '${instructor.name.replace(/'/g, "\\'")}')" 
                            class="btn btn-outline-danger btn-sm"
                            title="Unassign instructor"
                        >
                            <i class="bi bi-x-lg"></i>
                        </button>
                    `;
                    listGroup.appendChild(item);
                });
                
                instructorList.innerHTML = '';
                instructorList.appendChild(listGroup);
            })
            .catch(error => {
                console.error('Error loading instructors:', error);
                instructorList.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        Failed to load instructors. Please try again.
                    </div>`;
            });
    }
    
    function closeInstructorListModal() {
        const modal = document.getElementById('instructorListModal');
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        currentSubjectId = null;
    }
    
    function confirmUnassignInstructor(instructorId, instructorName) {
        Swal.fire({
            title: 'Confirm Unassign',
            text: `Are you sure you want to unassign ${instructorName}?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, unassign',
            cancelButtonText: 'Cancel',
            reverseButtons: true,
            showLoaderOnConfirm: true,
            preConfirm: () => {
                return fetch('{{ route("gecoordinator.unassignInstructor") }}', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': '{{ csrf_token() }}',
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        subject_id: currentSubjectId,
                        instructor_id: instructorId
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => {
                            throw new Error(err.message || 'Failed to unassign instructor');
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    if (!data.success) {
                        throw new Error(data.message || 'Failed to unassign instructor');
                    }
                    return data;
                });
            },
            allowOutsideClick: () => !Swal.isLoading()
        })
        .then((result) => {
            if (result.isConfirmed) {
                Swal.fire({
                    title: 'Success!',
                    text: 'Instructor has been unassigned successfully.',
                    icon: 'success',
                    timer: 2000,
                    timerProgressBar: true,
                    showConfirmButton: false
                }).then(() => {
                    window.location.reload();
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                title: 'Error!',
                text: error.message || 'Failed to unassign instructor',
                icon: 'error',
                confirmButtonText: 'OK'
            }).then(() => {
                // Reload the instructor list
                openInstructorListModal(currentSubjectId, document.getElementById('instructorListSubjectName').textContent);
            });
        });
    }

    function openConfirmAssignModal(subjectId, subjectName) {
        currentSubjectId = subjectId;
        document.getElementById('assign_subject_id').value = subjectId;
        document.getElementById('assignSubjectName').textContent = subjectName;
        
        // Reset the form
        const form = document.getElementById('assignInstructorForm');
        form.reset();
        
        // Show the modal
        const modal = document.getElementById('confirmAssignModal');
        modal.classList.remove('hidden');
        modal.classList.add('flex');
    }

    function closeConfirmAssignModal() {
        const modal = document.getElementById('confirmAssignModal');
        modal.classList.add('hidden');
        modal.classList.remove('flex');
    }
    
    // Handle form submission for assigning instructors
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('assignInstructorForm');
        if (form) {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const submitButton = form.querySelector('button[type="submit"]');
                const originalButtonText = submitButton.innerHTML;
                
                // Show loading state
                submitButton.disabled = true;
                
                // Send the request
                fetch('{{ route("gecoordinator.assignInstructor") }}', {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                        'X-CSRF-TOKEN': '{{ csrf_token() }}'
                    },
                    body: new FormData(form)
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => { throw err; });
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Close the modal
                        closeConfirmAssignModal();
                        
                        // Show success message
                        return Swal.fire({
                            title: 'Success!',
                            text: 'Instructor has been assigned successfully.',
                            icon: 'success',
                            timer: 2000,
                            timerProgressBar: true,
                            showConfirmButton: false
                        }).then(() => {
                            // Refresh the page to update the instructor lists
                            window.location.reload();
                        });
                    } else {
                        throw new Error(data.message || 'Failed to assign instructor');
                    }
                })
                .then(() => {
                    // Reload the page after success
                    window.location.reload();
                })
                .catch(error => {
                    console.error('Error:', error);
                    
                    // Show error message
                    Swal.fire({
                        title: 'Error!',
                        text: error.message || 'Failed to assign instructor',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                })
                .finally(() => {
                    // Restore button state
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalButtonText;
                });
            });
        }
    });

    function toggleViewMode() {
        const mode = document.getElementById('viewMode').value;
        const yearView = document.getElementById('yearView');
        const fullView = document.getElementById('fullView');

        if (mode === 'full') {
            yearView.classList.add('d-none');
            fullView.classList.remove('d-none');
        } else {
            yearView.classList.remove('d-none');
            fullView.classList.add('d-none');
        }
    }
</script>
@endpush

@push('styles')
<style>
    .bg-success-subtle {
        background-color: rgba(25, 135, 84, 0.1);
    }
    .table-hover tbody tr:hover {
        background-color: rgba(0, 0, 0, 0.02);
    }
    .btn-outline-success:hover, .btn-outline-danger:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .table-success {
        background-color: #198754 !important;
    }
    .table-success th {
        color: white;
        font-weight: 500;
    }
</style>
@endpush
@endsection